# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "master" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: "Terraform"

on:
  push:
    branches: ["master"]
  pull_request:

permissions:
  contents: read

jobs:
  terraform-init:
    name: "Terraform init"
    runs-on: ubuntu-latest
    environment: Dev

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        run: |
          wget https://releases.hashicorp.com/terraform/1.6.5/terraform_1.6.5_linux_amd64.zip
          unzip terraform_1.6.5_linux_amd64.zip
          sudo mv terraform /usr/local/bin/
          terraform version

      # Fetch tfvar file from s3 bucket
      - name: Fetch tfvars from s3 bucket
        env:
          AWS_REGION: "us-east-1"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
        run: |
          /bin/sh aws-secret-from-role.sh
          export S3_BUCKET_NAME="myterraformbucketishan"
          export S3_FILE_KEY="env:/Dev/terraform.dev.tfvars" # development environment folder name
          export CODEBUILD_DESTINATION="./infra/"
          aws s3 cp "s3://${S3_BUCKET_NAME}/${S3_FILE_KEY}" "${CODEBUILD_DESTINATION}"

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: |
          cd ./infra/
          terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check

  terraform-plan:
    name: " Terraform plan"
    runs-on: ubuntu-latest
    needs: [terraform-init]
    environment: Dev

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        run: |
          wget https://releases.hashicorp.com/terraform/1.6.5/terraform_1.6.5_linux_amd64.zip
          unzip terraform_1.6.5_linux_amd64.zip
          sudo mv terraform /usr/local/bin/
          terraform version

      # Fetch tfvar file from s3 bucket
      - name: Fetch tfvars from s3 bucket
        env:
          AWS_REGION: "us-east-1"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
        run: |
          /bin/sh aws-secret-from-role.sh
          export S3_BUCKET_NAME="myterraformbucketishan"
          export S3_FILE_KEY="env:/Dev/terraform.dev.tfvars" # development environment folder name
          export CODEBUILD_DESTINATION="./infra/"
          aws s3 cp "s3://${S3_BUCKET_NAME}/${S3_FILE_KEY}" "${CODEBUILD_DESTINATION}"

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: |
          cd ./infra/
          terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: |
          cd ./infra/
          terraform plan -var-file=terraform.dev.tfvars -input=false

  manual-approval:
    runs-on: ubuntu-latest
    needs: [terraform-plan]
    if: github.event_name == 'workflow_dispatch'

    steps:
    - name: Manual approval
      run: echo "${{ github.event.inputs.manual_approval_message }}" | grep -iq 'approve'
      id: approval

    - name: Proceed with deployment
      if: steps.approval.outputs.result == '0'
      run: echo "Manual approval received. Ready for deployment!"

  terraform-apply:
    name: "Terraform apply"
    runs-on: ubuntu-latest
    needs: [manual-approval]
    environment: Dev

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        run: |
          wget https://releases.hashicorp.com/terraform/1.6.5/terraform_1.6.5_linux_amd64.zip
          unzip terraform_1.6.5_linux_amd64.zip
          sudo mv terraform /usr/local/bin/
          terraform version

      # Fetch tfvar file from s3 bucket
      - name: Fetch tfvars from s3 bucket
        env:
          AWS_REGION: "us-east-1"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
        run: |
          /bin/sh aws-secret-from-role.sh
          export S3_BUCKET_NAME="myterraformbucketishan"
          export S3_FILE_KEY="env:/Dev/terraform.dev.tfvars" # development environment folder name
          export CODEBUILD_DESTINATION="./infra/"
          aws s3 cp "s3://${S3_BUCKET_NAME}/${S3_FILE_KEY}" "${CODEBUILD_DESTINATION}"

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: |
          cd ./infra/
          terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: |
          cd ./infra/
          terraform plan -var-file=terraform.dev.tfvars -input=false

      # - name: Terraform Apply
      #   if: github.ref == 'refs/heads/"master"' && github.event_name == 'push'
      #   run: terraform apply -var-file=terraform.dev.tfvars -auto-approve -input=false
